using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using ClusteringAlgorithm;
using MathNet.Numerics.LinearAlgebra.Double;

namespace RunoffsClassify {
    internal class Program {
        private static void Main(string[] args) {
            var data = DenseMatrix.OfArray(new double[,] {
                {1960, 5620, 2800, 3370, 2640, 1090},
                {1880, 5750, 7070, 4580, 3530, 1620},
                {2430, 5650, 5360, 2990, 2430, 1330},
                {1890, 2810, 2380, 3450, 1940, 1170},
                {2220, 4870, 4530, 3270, 3550, 1390},
                {1310, 2480, 4300, 3760, 2070, 1130},
                {2460, 2290, 3250, 1940, 1710, 1040},
                {2820, 3740, 3850, 4370, 2160, 1170},
                {1770, 3860, 2870, 2190, 1740, 909},
                {2490, 3890, 6190, 4070, 1900, 1050},
                {1860, 3950, 4050, 3390, 2600, 1250},
                {2150, 2900, 3890, 4840, 3080, 1220},
                {3630, 6110, 5900, 5710, 2940, 1520},
                {1870, 3640, 4560, 5260, 2690, 1270},
                {1540, 2550, 2300, 2250, 2010, 968},
                {2880, 4010, 3890, 4470, 2490, 1090},
                {989, 3180, 2750, 4030, 1780, 941},
                {1560, 4420, 3660, 2610, 2500, 1200},
                {2210, 2880, 2660, 2310, 2250, 1130},
                {1990, 3130, 2680, 2330, 1710, 903},
                {1780, 1970, 2460, 2910, 1710, 976},
                {3000, 5050, 4490, 5190, 2490, 1290},
                {1750, 3340, 2710, 2480, 1840, 1030},
                {1940, 3480, 2250, 2880, 1990, 1020},
                {2070, 2560, 3380, 2520, 2200, 1060},
                {2670, 3310, 3080, 3180, 2140, 1120},
                {1200, 2400, 3260, 3820, 2920, 1230},
                {1550, 2540, 4670, 4250, 3610, 1540},
                {2720, 4270, 2680, 3490, 1670, 925},
                {1710, 5010, 2450, 3330, 1980, 1010},
                {1260, 2320, 2620, 2640, 1640, 898},
                {1560, 4130, 2640, 2460, 1350, 874},
                {2420, 4500, 3110, 3750, 2460, 1130},
                {932, 2040, 2260, 4270, 2830, 1160},
                {973, 4470, 4240, 5220, 2940, 1330},
                {1390, 2360, 2570, 4360, 2610, 1270},
                {1770, 3840, 2950, 4000, 3730, 1520},
                {3040, 3330, 3410, 4340, 3420, 1370},
                {1680, 3760, 5130, 4270, 2500, 1210},
                {1380, 3480, 2140, 2200, 1610, 969},
                {1280, 3370, 6370, 4530, 2870, 1370},
                {2470, 2130, 1790, 2320, 1530, 831},
                {1930, 4320, 2790, 3140, 1950, 1060},
                {1490, 4720, 3380, 2790, 2010, 1040},
                {2170, 3950, 2350, 2620, 1800, 922},
                {1710, 5880, 6920, 4410, 2060, 1320},
                {3595, 5450, 3523, 3744, 1942, 1380},
                {3009, 3926, 3904, 4574, 1870, 1093},
                {3455, 2485, 3679, 5266, 2522, 1171},
                {2058, 3398, 3755, 1788, 1798, 907},
                {2702, 4066, 3495, 5565, 2111, 1127},
                {2379, 3657, 3163, 4115, 2570, 1185},
                {2157, 3584, 5574, 3687, 2183, 1166},
                {2646, 2562, 1378, 1834, 1749, 835},
                {1640, 2818, 2293, 3219, 1590, 935},
                {2030, 3089, 4108, 3995, 1840, 1088},
                {1387, 3915, 4924, 2370, 1663, 943},
                {1806, 3316, 2628, 3331, 1861, 1078},
                {1756, 3040, 2140, 1604, 1458, 759},
                {2243, 5821, 3003, 3598, 2458, 1175},
            });
            var kmeans = new Kmeans(data);
            var c = 3; // 聚类数目
            var result = kmeans.Clustering(c);
            Console.WriteLine("聚类中心值:");
            Console.WriteLine(result.Center.Transpose().ToMatrixString());

            Console.WriteLine("隶属向量");
            Console.WriteLine(result.IDX.ToRowMatrix().ToMatrixString(1,result.IDX.Count));
        }

        //private static List<double[,]> ReadData(string path) {
        //    var runoffs = new List<double[,]>();
        //    var lines = File.ReadAllLines(path);
        //    foreach (var line in lines) {
        //        var xy = line.Split(new[] {' ', '\t'}, StringSplitOptions.RemoveEmptyEntries);
        //        if (xy.Length == 0) continue;
        //        if (xy.Length != 2)
        //            throw new FormatException("there should be 2 number in one line");
        //        var x = double.Parse(xy[0]);
        //        var y = double.Parse(xy[1]);
        //        runoffs.Add(new[] {x, y});
        //    }
        //    return runoffs;
        //}
    }
}